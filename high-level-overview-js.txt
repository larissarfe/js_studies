

---------> HOW JS WORK BEHIND THE SCENES 

...> FIRST DEFINITION OF JS: 

JAVASCRIPT IS A HIGH LEVEL, OBJECT ORIENTED, MULTI PARADIGM PROGRAMMING LANGUAGE 



--------->>> 9 JS TOPICS:

1. HIGH LEVEL: Every program that runs on your computer needs some hardware resources such as memory and CPU to do its work.
There are low level languages, such as C where the developer has to manage resources manually - for example: asking the computer for memory to create a new variable 

On the other hand, we have HIGH LEVEL LANGUAGES suc as JS and Python where we do not need to manage resourcesat all, because these languages have what is so called ABSTRACTIONS that take all of that work away from us - everything happens automatically

One of the powerful tools that takes memory management away from us developers is GARBAGE COLLECTION 

2. GARBAGE-COLLECTED: Garbage Collection is basically an algorithm INSIDE DE JS ENGINE WHICH AUTOMATICALLY REMOVES OLD, UNUSED OBJECTS FROM THE COMPUTER MEMORY 

3. INTERPRETED OR JUST IN TIME COMPILED: tHE COMPUTER'S PROCESSOR ONLY UNDERSTAND ZEROS AND ONES.
Ultimatelly, every single program needs to be written in zeros and ones, which is also called machine code.
And since it's not really practical to write - WE SIMPLY WRITE HUMAN READABLE JS CODE, WHICH IS AN ABSTRACTION OVER MACHINE CODE!!

BUT THIS CODE, EVENTUALLY NEEDS TO BE TRANSLATED TO MACHINE CODE - AND THAT STEP CAN BE EITHER COMPILING OR INTERPRETING.
THIS STEP IS NECESSARY IN EVERY SINGLE PROGRAMMING LANGUAGE BECAUSE NO ONE WRITES MACHINE CODE MANUALLY.
IN THE CASE OF JS, THE CONVERTION TO MACHINE CODE IS COMPILING AND IT HAPPENS INSIDE THE JS ENGINE 

4. MULTI-PARADIGM: It's what makes JS so popular. 

IN PROGRAMMING, A PARADIGM IS AN APPROACH AND MINDSET OF STRUCTURING CODE, WHICH WILL DIRECT YOUR CODE STYLE AND TECHNIQUE 

3 POPULAR PARADIGMS ARE:

a) Procedural Programming: IS BASICALLY JUST ORGANIZING THE CODE IN A VERY LINEAR WAY AND THEN WITH SOME FUNCTIONS IN BETWEEN



b) Object Oriented Programming (OOP): FIRST, ALMOST EVERYTHING IN JS IS AN OBJECT EXCEPT FOR PRIMITIVE VALUES - SUCH AS NUMBERS, STRINGS ETC.


c) Funtional Programming (FP): 

-- ALSO WE CAN DIVIDE PARADIGMS AS IMPERATIVE OR DECLARATIVE - 

SOME LANGUAGES ARE ONLY PROCEDURAL, OR ONLY OOP, OR ONLY FP BUT JS DOES IT ALL!!!!!!  WE CAN USE WHATEVER PARADIGM WE WANT!!!




5. PROTOTYPE-BASED OBJECT-ORIENTED:IT'S PROTOTYPE BASED BECAUSE WE CAN USE METHOD THAT WERE INHERITED FROM A BLUEPRINT, THE PROTOTYPE, FOR EX METHOD ON AN ARRAY 


6. FIRST CLASS FUNCTIONS: IT MEANS THAT FUNCTIONS ARE TREATED JUST AS REGULAR VARIABLES - SO WE CAN PASS FUNCTIONS INTO OTHER FUNTIONS AND WE CAN EVEN RETURN FUNCTIONS FROM FUNCTIONS 
it allows us to use powerful techniques AND ALSO ALLOW US FOR FUNTIONAL PROGRAMMING 

7. DYNAMIC: DYNAMIC ACTUALLY MENAS DYNAMICALLY TYPED - IN JS WE DON'T ASSIGN DATA TYPES TO VARIABLES, INSTEAD THEY ONLY BECOME KNOWN 
WHEN THE JS ENGINE EXECUTES OUR CODE. ALSO, THE TYPE OF VARIABLES CAN EASILY BE CHANGED AS WE REASSIGN VARIABLES EX: 
let x  = 23 
x =  'Jonas' 

obs: ruby we need to manually assign types to variables? 

8. SINGLE THREADED:

- WHAT IS A CONCURRENCY MODEL? IT'S A TERM TO SAY HOW JS ENGINE HANDLES MULTIPLE TASKS HAPPENING AT THE SAME TIME 

BUT WHY DO WE NEED THAT? 

BECAUSE JS RUNS IN ONE SINGLE THREAD, SO IT CAN ONLY DO ONE THING AT A TIME AND THEREFORE WE NEED A WAY OF HANDLING 
MULTIPLE THINGS HAPPENING AT THE SAME TIME 

- OBS: In computing, a thread is like a set of instructions that is executed in the computer's CPU 

BASICALLY, THE THREAD IS WHERE OUR CODE IS ACTUALLY EXECUTED IN A MACHINE'S PROCESSOR 

-- BUT WHAT IF THERE'S A LONG RUNNING TASK? IT WOULD BLOCK THE SINGLE THREAD. HOWEVER, WE WANT NONBLOCK BEHAVIOR 
AND HOW DO WE ACHIEVE THAT? 

BY USING AN EVENT LOOP: -> TAKES LONG RUNNING TASKS, EXECUTES THEM IN THE BACKGROUND AND PUTS THEM IN THE MAIN THREAD ONCE THEY'RE FINISHED 




 
9. NON-BLOCKING EVENT LOOP: 