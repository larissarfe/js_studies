

========== HOISTING AND TDZ IN PRACTICE 

Hoisting is a fairly straighforward process 

var me  = 'Jonas'; 
let job = "teacher";
const year = 1991;


console.log(me); - OUTPUT: undefined

=> VARIABLES DECLARED WITH VAR ARE ACTUALLY HOISTED BUT THEY'RE HOISTED TO THE VALUE OF UNDEFINED 

console.log(job); - ReferenceError: Cannot access 'job' before initialization

=> THE JOB VARIABLE IS STILL IN THE TEMPORAL DEAD ZONE STARTS FROM THE BEGINNING OF THE CURRENT SCOPE UNTIL THE POINT OF THE CODE WHERE IT IS DEFINED 

A TEMPORAL DEAD ZONE OF A VARIABLE DECLARED WITH LET OR CONST 
console.log(year); - ReferenceError: Cannot access 'year' before initialization

=> THE YEAR VARIABLE IS STILL IN THE TEMPORAL DEAD ZONE STARTS FROM THE BEGINNING OF THE CURRENT SCOPE UNTIL THE POINT OF THE CODE WHERE IT IS DEFINED 


// ==============================>>> HOISTING WITH FUNCTIONS:

console.log(addDecl(2, 3));
console.log(addExpr);
console.log(addArrow);

function addDecl(a, b) {
  return a + b;
}

const addExpr = function (a, b) {
  return a + b;
};

const addArrow = (a, b) => a + b;

THE FUNCTION EXPRESSIONS WRITTEN WITH CONST ARE LIKE A CONST VARIABLE SO WE CAN'T ACCESS IT IN THE TEMPORAL DEAD ZONE 

WE ARE SIMPLY ASSIGNING A FUNCTION VALUE TO THIS VARIABLE 

- ANY VARIABLES DECLARED WITH VAR WILL BE HOISTED AND SET TO UNDEFINED 

======>  THE ONLY FUNCTION THAT WE CAN USE BEFORE DECLARING IT IS THE FUNCTION DECLARATION 


OBSERVATION: 0 IS A FALSE VALUE, UNDEFINED IS A FALSE VALUE 

============>>>>>> YOU SHOULD DECLARE YOUR VARIABLES AT THE TOP OF EACH SCOPE 

============>>>>>> ALWAYS DECLARE ALL YOUR FUNCTIONS FIRST AND USE THEM ONLY AFTER THE DECLARATION => THIS APPLIES TO ALL TYPES OF FUNCTION, EVEN FUCTIONS DECLARATIONS, WHICH ARE HOISTED 

----------- WINDOW IS THE GLOBAL OBJECT OF JS IN THE BROWSER - VARIABLES DECLARED BY LET AND CONST DO NOT CREATE PROPERTIES ON THE WINDOW OBJECT 