
--------- SCOPE AND SCOPE CHAIN 

 EACH EXECUTION CONTEXT HAS A VARIABLE ENVIROMENT 

    EXECUTION CONTEXT:

    1. VARIABLE ENVIROMENT;
    2. SCOPE CHAIN 
    3. THIS KEYWORD 



------> WHAT IS SCOPING? 

SCOPING IS HOW OUR PROGRAM'S VARIABLES ARE ORGANIZED AND ACCESSED BY THE JS ENGINE  " WHERE DO VARIABLES LIVE?" 
OR "WHERE CAN WE ACCESS A CERTAIN VARIABLE  AND WHERE NOT?"

JS HAS SOMETHING CALLED LEXICAL SCOPING: SCOPING IS CONTROLLED BY PLACEMENT OF FUNCTIONS AND BLOCKS IN THE CODE 



----> VARIABLE SCOPING IS INFLUENCED BY WHERE EXACTLY WE WRITE OUR FUNCTIONS AND CODE BLOCKS 

-----> SCOPE: SPACE OR ENVIROMENT IN WHICH A CERTAIN VARIABLE IS DECLARED (VARIABLE ENVIROMENT IN CASE OF FUNCTIONS). 

THERE IS GLOBAL SCOPE, FUNCTION SCOPE AND BLOCK SCOPE 


----> ESCOPE OF A VARIABLE IS THE ENTIRE REGION OF OUR CODE WHERE A CERTAIN VARIABLE CAN BE ACCESS

OBS: SCOPE IS NOT THE SAME AS SCOPE OF A VARIABLE 

-------------------> THE 3 TYPES OF SCOPE 

SCOPE IS THE PLACE IN OUR CODE WHERE VARIABLES ARE DECLARED - THE EXACT SAME THING IS TRUE FOR FUNCTIONS AS WELL 

BECAUSE IN THE END, FUNCTIONS ARE JUST VALUES STORED IN A VARIABLE 



1 - GLOBAL SCOPE:  THE GLOBE SCOPE IS FOR TOP LEVEL CODE (THE CODE THAT IS NOT INSIDE OF A FUNCTION) 

const name = 'Jonas';
const job = "teacher";
const year = 1989; 

A. OUTSIDE OF ANY FUNTION OR BLOCK;

B. VARIABLES DECLARED IN GLOBAL SCOPE ARE ACCESSIBLE >>>>> EVERYWHERE <<<<<<



2 - FUNCTION SCOPE: EACH AND EVERY FUNCTION CREATES A SCOPE  

function calcAge(birthYear) {
    const now = 2037 
    const age = now - birthYear; 
    return age;
}

console.log(now) ------> REFERENCE ERROR!!! - OUTSIDE THE FUNCTION - VARIABLE NOT ACCESSIBLE

A. VARIABLES ARE ACCESSIBLE ONLY INSIDE THE FUNCTION, NOT OUTSIDE!!!! 

B. ALSO CALLED LOCAL SCOPE 


3- BLOCK SCOPE: 



TRADITIONALLY, ONLY FUNCTIONS CREATED SCOPES IN JS, BUT STARTING IN ES6, BLOCKS ALSO CREATES SCOPES NOW 

    WOTH BLOCKS, WE MEAN EVERYTHING THAT IS BETWEEN CURLY BRACES - SUCH AS THE BLOCK OF AN IF STATEMENT OR A LOOP 


JUST LIKE THE FUNCTIONS, VARIABLES CREATED INSIDE THE BLOCK ARE ONLY ACCESSIBLE INSIDE THAT BLOCK AND NOT OUTSIDE OF IT 

---> THE BIG DIUFFERENCE IS THAT BLOCK SCOPES ONLY APPLY TO VARIABLES DECLARED WITH LET OR CONST 

* SO ONLY LET AND CONST VARIABLES ARE RESTRICTED TO THE BLOCK IN WHICH THEY WERE CREATED 

* THAT'S WHY WE SAY THAT LET AND CONST VARIABLES ARE BLOCK SCOPED 

* SO IF I DECLARE A VARIABLE IN THIS BLOCK USING VAR THEN THAT VARIABLE WOULD STILL BE ACCESSIBLE OUTSIDE OF THAT BLOCK
AND WOULD BE SCOPED TO THE CURRENT FUNCTION OR TO THE GLOBAL SCOPE 

--- SO WE SAY THAT VAR IS FUNCTION SCOPED 

--- ES5 VARIABLES DECLARED WITH VAR, ONLY CARE ABOUT FUNCTIONS, BUT NOT ABOUT BLOCKS - THEY SIMPLY IGNORE THEM 

-------->>>>>>> STARTING WITH ES6 ALL FUNCTIONS ATE NOW ALSO BLOCK SCOPED - IN STRICT MODE 

------------------ FUNCTIONS DECLARED INSIDE OF A BLOCK WILL ONLY BE ACCESSIBLE INSIDE OF THAT BLOCK 


>>>>>>>>> RECAP::::::::: ->  LET AND CONST VARIABLES AS WELL AS FUNCTIONS ARE BLOCK SCOPED <- 


-------> EVERY SCOPE ALWAYS HAS ACCESS TO ALL THE VARIABLES FROM ALL OUTER SCOPES - FROM ALL IT'S PARENTS SCOPES 

---- IF ONE SCOPE NEEDS TO USE A CERTAIN VARIABLE BUT CANNOT FIND IT IN THE CURRENT SCOPE - IT WILL LOOK UP IN THE SCOPE CHAIN AND SEE IF IT CAN FIND A VARIABLE 
IN ONE OF THE PARENT SCOPES - IF IT CAN, IT WILL THEN USE THAT VARIABLE, AND IF IT CAN'T THERE WILL BE AN ERROR

            THIS PROCESS IS CALLED VARIABLE LOOK UP!!!! ^^^^^^

            THIS CANNOT WORK THE OTHER WAY AROUND!!!!! !

            SO A CERTAIN SCOPE WILL NEVER EVER HAVE ACCESS TO THE VARIABLESOF AN   INNER SCOPE 


ONLY PARENT SCOPES CAN BE USED BUT NOT CHILD SCOPES!!!!!!!!! 


AGAIN VAR IS ONLY FUNCTION SCOPED AND NOT BLOCK SCOPED 

SO IF I HAVE AN IF BLOCK INSIDE OF A FUNCTION AND A VAR VARIABLE DECLARED IN THAT BLOCK, THE VAR SCOPE WON'T BE THE IF BLOCK BUT THE FUNCTION SCOPE!!!

---> GLOBAL SCOPES ARE ACCESSIBLE EVERYWHERE BECAUSE THEY'RE ALWAYS AT THE TOP OF THE SCOPE CHAIN 


------------------------------

THE WAY THAT WE CAN ACCESS VARIABLES DEPENDS WHERE THE SCOPE IS PLACED SO WHERE IT IS WRITTEN IN THE CODE ---> LEXICAL SCOPING

SIBILING SCOPES DO NOT HAVE ACCESS TO EACH OTHER'S VARIABLES SIMPLY BEACUSE ONE IS NOT WRITTEN INSIDE THE OTHER ONE 

